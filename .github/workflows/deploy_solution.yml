name: Deploy solution from a config

on:
  workflow_call:
    inputs:
      config_file: # the variable you can use in place of a matrix
        required: true
        type: string
  workflow_dispatch:
    inputs:
      config_file: # the variable you can use in place of a matrix
        type: string

jobs:
  get_arguments:
    name: Extract arguments from configuration
    runs-on: [self-hosted, dl4miceverywhere-builder]
    steps:
      - name: Clone actual DL4MicEverywhere-album repository
        uses: actions/checkout@v4
        with: 
          path: DL4MicEverywhere-album
      - name: Clone DL4MicEverywhere repository
        uses: actions/checkout@v4
        with:
          repository: HenriquesLab/DL4MicEverywhere
          path: DL4MicEverywhere
      # Set up Python for its use
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          # cache: 'pip' # caching pip dependencies

      # First udpate the solution.py file
      - name: Install requirements
        working-directory: ./DL4MicEverywhere-album
        run: pip install -r .tools/requirements.txt
      - name: Update the version of the notebook on the configuration
        working-directory: ./DL4MicEverywhere-album
        run: python3 .tools/python_tools/convert_config_to_solution.py '../DL4MicEverywhere' '${{ inputs.config_file }}'
      - name: Upload modified solution
        uses: actions/upload-artifact@v4
        with:
          name: 'solution_${{ inputs.config_file }}'
          path: './DL4MicEverywhere-album/src/${{ inputs.config_file }}/solution.py'

  build_amd64:
    name: Install album solution on AMD64
    runs-on: [self-hosted, dl4miceverywhere-builder]
    needs: get_arguments

    # Conda needs to use login mode
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Clone actual DL4MicEverywhere-album repository
        uses: actions/checkout@v4
      - name: Set up album's Miniconda environment
        uses: conda-incubator/setup-miniconda@v3
        with:          
          miniforge-version: latest
          auto-activate-base: false 
          python-version: 3.12 # Python version needs to be between 3.7 and 3.12
          activate-environment: album
          environment-file: .tools/actions_tools/album_enviornment.yml 
          mamba-version: "*"
          use-mamba: true
          condarc-file: .tools/actions_tools/album_condarc.yml # Optional runtime configuration
          run-post: true # Run post cleanup step
      
      - run: |
          conda info
          conda list
      - name: Download modified solution from previous step
        uses: actions/download-artifact@v4
        with:
          name: 'solution_${{ inputs.config_file }}'
          path: temp
      # To be safe, remove any possible solution with the same
      - name: Uninstall the solution to be safe
        run: album uninstall 'temp/solution.py'
        continue-on-error: true
      - name: Test the installation of certain solution
        run: album install 'temp/solution.py'

  

  build_arm64:
    name: Install album solution on ARM64
    runs-on: [self-hosted, macOS, ARM64]
    needs: get_arguments

    # Conda needs to use login mode
    defaults:
      run:
        shell: bash -l {0}
    
    steps:
      - name: Clone actual DL4MicEverywhere-album repository
        uses: actions/checkout@v4
      - name: Set up album's Miniconda environment
        uses: conda-incubator/setup-miniconda@v3
        with:          
          miniforge-version: latest
          auto-activate-base: false 
          python-version: 3.12 # Python version needs to be between 3.7 and 3.12
          activate-environment: album
          environment-file: .tools/actions_tools/album_enviornment.yml 
          mamba-version: "*"
          use-mamba: true
          condarc-file: .tools/actions_tools/album_condarc.yml # Optional runtime configuration
          run-post: true # Run post cleanup step
      
      - run: |
          conda info
          conda list
      - name: Download modified solution from previous step
        uses: actions/download-artifact@v4
        with:
          name: 'solution_${{ inputs.config_file }}'
          path: temp    
      # To be safe, remove any possible solution with the same
      - name: Uninstall the solution to be safe
        run: album uninstall 'temp/solution.py'
        continue-on-error: true
      - name: Test the installation of certain solution
        run: album install 'temp/solution.py'

  deploy_solution:
    name: Update the versions on configurations
    runs-on: [self-hosted, dl4miceverywhere-builder]
    if: ${{ always() && ( contains(needs.build_arm64.result, 'success') || contains(needs.build_amd64.result, 'success') ) }}
    needs:
      - build_arm64
      - build_amd64
    permissions:
      contents: write

    # Conda needs to use login mode
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Clone actual DL4MicEverywhere-album repository
        uses: actions/checkout@v4
      - name: Set up album's Miniconda environment
        uses: conda-incubator/setup-miniconda@v3
        with:          
          miniforge-version: latest
          auto-activate-base: false 
          python-version: 3.12 # Python version needs to be between 3.7 and 3.12
          activate-environment: album
          environment-file: .tools/actions_tools/album_enviornment.yml 
          mamba-version: "*"
          use-mamba: true
          condarc-file: .tools/actions_tools/album_condarc.yml # Optional runtime configuration
          run-post: true # Run post cleanup step
      - run: |
          conda info
          conda list
      - name: Update the repository with git pull
        run: git pull
      - name: Download modified solution from previous step
        uses: actions/download-artifact@v4
        with:
          name: 'solution_${{ inputs.config_file }}'
          path: ../temp
      - name: Copy the updated solution
        run: cp '../temp/solution.py' './src/${{ inputs.config_file }}/solution.py'
      - name: Update solution log
        run: |
          python .tools/python_tools/add_solution_log.py ${{ inputs.config_file }} arm64 ${{ contains(needs.build_arm64.result, 'success') }}
          python .tools/python_tools/add_solution_log.py ${{ inputs.config_file }} amd64 ${{ contains(needs.build_amd64.result, 'success') }}
      - name: Commit updated solution
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: GitHub Action - Update the notebook version on the configuration

      # The local runner needs to have the catalog cloned, so run:
      # abum clone template:catalog https://github.com/HenriquesLab/DL4MicEverywhere-album/ DL4MicEverywhere_album
      # We don't run it here because multiple runs give ERRORs
      - name: Clone catalog
        run: |
          album clone template:catalog https://github.com/HenriquesLab/DL4MicEverywhere-album/ DL4MicEverywhere_album
      - name: Add catalog
        run: |
          album add-catalog https://github.com/HenriquesLab/DL4MicEverywhere-album/
      - name: Deploy certain solution
        run: |
          album deploy '../temp/solution.py' DL4MicEverywhere_album
      - name: Post - Deploy certain solution
        run: album remove-catalog DL4MicEverywhere_album