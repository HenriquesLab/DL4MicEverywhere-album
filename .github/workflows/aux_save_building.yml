name: (Aux) Update the solution source and log the result

on:
  workflow_call:
    inputs:
      config_file: 
        required: true
        type: string
      solution_version: 
        required: true
        type: string
      build_amd64_result:
        required: true
        type: boolean
      build_arm64_result:
        required: true
        type: boolean
env:
  # Use the same ssh-agent socket value across all jobs
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  
jobs:
  save_building:
    name: Update the solution source and log the result
    runs-on: [self-hosted, dl4miceverywhere-builder]
    permissions:
      contents: write
    steps:
      - name: Sleep for 30 seconds
        run: sleep 30
      - name: Clone actual DL4MicEverywhere-album repository
        uses: actions/checkout@v4
      - name: Allow fast-forward on git pull
        run: git config --global pull.ff true 
      - name: Execute and retry git pull
        uses: nick-fields/retry@v3
        with:
          retry_wait_seconds: 30
          max_attempts: 3
          command: git pull --allow-unrelated-histories 
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          # cache: 'pip' # caching pip dependencies
      - name: Install the requirements on Python
        run: pip install -r .tools/requirements.txt
      - name: Get solution name for artifact
        if: ${{ inputs.build_arm64_result }} || ${{ inputs.build_amd64_result }}
        id: solution_name
        run: |
          export INPUT_CONFIG_NAME='${{ inputs.config_file }}'  
          echo solution_name="${INPUT_CONFIG_NAME/\//-}" >> $GITHUB_OUTPUT
      - name: Download modified solution from previous step
        if: ${{ inputs.build_arm64_result }} || ${{ inputs.build_amd64_result }}
        uses: actions/download-artifact@v4
        with:
          name: 'solution_${{ steps.solution_name.outputs.solution_name }}'
          path: ../temp
      - name: Copy the updated solution
        if: ${{ inputs.build_arm64_result }} || ${{ inputs.build_amd64_result }}
        run: cp '../temp/solution.py' './src/${{ inputs.config_file }}/solution.py'
      - name: Add building tags to the solution
        if: ${{ inputs.build_arm64_result }} || ${{ inputs.build_amd64_result }}
        run: |
          python .tools/python_tools/add_build_tag_to_solution.py -p './src/${{ inputs.config_file }}/solution.py' -d ${{ inputs.build_amd64_result }} -r ${{ inputs.build_arm64_result }}
      - name: Update solution log
        run: |
          python .tools/python_tools/save_solution_log.py ${{ inputs.config_file }} ${{ inputs.solution_version }} arm64 ${{ inputs.build_arm64_result }}
          python .tools/python_tools/save_solution_log.py ${{ inputs.config_file }} ${{ inputs.solution_version }} amd64 ${{ inputs.build_amd64_result }}
      - name: Commit updated solution
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: GitHub Action - Update the notebook version on the configuration
      # This is done to avoid two steps running at the same time:
      # deploying ablum soultion  and pulling/pushing the src/solution
      - name: Save the artifact as successful solution
        if: ${{ inputs.build_arm64_result }} || ${{ inputs.build_amd64_result }}
        uses: actions/upload-artifact@v4
        with:
          name: 'success_${{ steps.solution_name.outputs.solution_name }}'
          path: './src/${{ inputs.config_file }}/solution.py'
